# python -m venv venv
# source venv/bin/activate
# pip install esptool
# pip install pyserial
# pip install tqdm
# python upload.py
import os
import subprocess
import serial.tools.list_ports
import sys
from multiprocessing import Pool, Lock
from tqdm import tqdm
import re


# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
base_dir = os.path.dirname(os.path.abspath(__file__))
firmware_path = os.path.join(base_dir, ".pio", "build", "sunton_s3", "firmware.bin")
bootloader_path = os.path.join(base_dir, ".pio", "build", "sunton_s3", "bootloader.bin")
partitions_path = os.path.join(base_dir, ".pio", "build", "sunton_s3", "partitions.bin")
ota_path = os.path.join(base_dir, "flash-ota.bin")

def find_ch340_ports():
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï CH340 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    ports = []
    for port in serial.tools.list_ports.comports():
        if "CH340" in port.description or "USB-SERIAL CH340" in port.description:
            ports.append(port.device)
    return ports

def upload_to_port(args):
    """‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤"""
    port, port_index = args
    print_lock = Lock()
    
    try:
        with print_lock:
            print(f"\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï {port}...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á progress bar ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ô‡∏µ‡πâ
        with tqdm(total=100, desc=f"‡∏û‡∏≠‡∏£‡πå‡∏ï {port}", position=port_index, leave=False, bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt}') as pbar:
            
            # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á esptool ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö output ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
            process = subprocess.Popen(
                [
                    sys.executable, "-m", "esptool",
                    "--chip", "esp32s3",
                    "--port", port,
                    "--baud", "460800",
                    "write_flash",
                    "--flash_mode", "dio",
                    "--flash_freq", "80m",
                    "--flash_size", "16MB",
                    "0x0000", bootloader_path,
                    "0x8000", partitions_path,
                    "0xe000", ota_path,
                    "0x10000", firmware_path
                ],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1,
                encoding='utf-8',
                errors='replace'
            )
            
            # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö regex ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            progress_re = re.compile(r'\((\d+) %\)')
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
            for line in process.stdout:
                match = progress_re.search(line)
                if match:
                    percent = int(match.group(1))
                    pbar.n = percent
                    pbar.refresh()
            
            process.wait()
        
        if process.returncode == 0:
            with print_lock:
                print(f"\n‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï {port}")
            return True
        else:
            with print_lock:
                print(f"\n‚ùå ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï {port}")
            return False
            
    except Exception as e:
        with print_lock:
            print(f"\n‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï {port}: {str(e)}")
        return False

if __name__ == "__main__":
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    ch340_ports = find_ch340_ports()
    
    if not ch340_ports:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï CH340 ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
    else:
        print(f"üîç ‡∏û‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï CH340: {', '.join(ch340_ports)}")
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô...\n")
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏û‡∏£‡πâ‡∏≠‡∏° index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö position ‡∏Ç‡∏≠‡∏á progress bar
        port_args = [(port, idx) for idx, port in enumerate(ch340_ports)]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Pool ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        with Pool(processes=len(ch340_ports)) as pool:
            results = pool.map(upload_to_port, port_args)
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        successful = sum(results)
        print(f"\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î:")
        print(f"  - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {successful} ‡∏û‡∏≠‡∏£‡πå‡∏ï")
        print(f"  - ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {len(ch340_ports) - successful} ‡∏û‡∏≠‡∏£‡πå‡∏ï")
        print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")